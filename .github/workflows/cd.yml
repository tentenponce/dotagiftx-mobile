name: Release

on:
  push:
    branches:
      - feature/playstore

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha }}

    # - name: Setup Flutter
    #   uses: subosito/flutter-action@v2
    #   with:
    #     flutter-version: '3.29.3'
    #     channel: 'stable'

    # - name: Cache Flutter dependencies
    #   id: cache
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       ~/.pub-cache
    #       ${{ github.workspace }}/.dart_tool
    #     key: flutter-deps-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
    #     restore-keys: |
    #       flutter-deps-${{ runner.os }}-

    # - name: Cache status
    #   run: |
    #     if [ "${{ steps.cache.outputs.cache-hit }}" = "true" ]; then
    #       echo "‚úÖ Using cached Flutter dependencies (faster build)"
    #     else
    #       echo "üîÑ Installing Flutter dependencies (first time or cache miss)"
    #     fi

    # - name: Get dependencies
    #   run: flutter pub get

    # - name: Generate internationalization code
    #   run: |
    #     echo "üåç Generating internationalization code..."
    #     flutter pub run intl_utils:generate
    #     echo "‚úÖ Internationalization code generated"

    # - name: Code generation
    #   run: |
    #     echo "üîß Running code generation..."
    #     dart run build_runner build --delete-conflicting-outputs
    #     echo "‚úÖ Code generation completed"

    - name: Setup production environment and keystore
      env:
        PROD_ENV: ${{ secrets.PROD }}
      run: |
        echo "Setting up production environment and keystore files..."
        
        # Create required directories if they don't exist
        mkdir -p android/app
        mkdir -p .env
        
        # Save PROD environment as JSON file for dart-define-from-file
        echo "$PROD_ENV" > .env/prod.json
        echo "‚úÖ Production environment JSON created"
        
        # Extract and decode keystore
        echo "$PROD_ENV" | jq -r '.keystore' | base64 -d > android/app/dotagiftx.keystore
        
        # Extract and decode keystore properties
        echo "$PROD_ENV" | jq -r '.keystoreProperties' | base64 -d > android/app/dotagiftx.keystore.properties
        
        # Extract and decode google-services.json
        echo "$PROD_ENV" | jq -r '.googleServicesJson' | base64 -d > android/app/google-services.json
        
        # Verify files were created
        if [ -f "android/app/dotagiftx.keystore" ]; then
          echo "‚úÖ Keystore file created successfully"
          ls -la android/app/dotagiftx.keystore
        else
          echo "‚ùå Failed to create keystore file"
          exit 1
        fi
        
        if [ -f "android/app/dotagiftx.keystore.properties" ]; then
          echo "‚úÖ Keystore properties created successfully"
          echo "Properties file contents (without sensitive data):"
          grep -E '^(storeFile|keyAlias)=' android/app/dotagiftx.keystore.properties || echo "Basic structure verified"
        else
          echo "‚ùå Failed to create keystore properties file"
          exit 1
        fi
        
        if [ -f "android/app/google-services.json" ]; then
          echo "‚úÖ Google Services JSON file created successfully"
          echo "File size: $(stat -c%s android/app/google-services.json) bytes"
        else
          echo "‚ùå Failed to create Google Services JSON file"
          exit 1
        fi
        
        if [ -f ".env/prod.json" ]; then
          echo "‚úÖ Production JSON file created successfully"
        else
          echo "‚ùå Failed to create production JSON file"
          exit 1
        fi

    # - name: Build release AAB
    #   run: |
    #     echo "Building release AAB with production environment..."
    #     flutter build appbundle --release --dart-define-from-file=.env/prod.json
        
    #     # Verify AAB was created
    #     if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
    #       echo "‚úÖ AAB built successfully"
    #       ls -la build/app/outputs/bundle/release/app-release.aab
    #     else
    #       echo "‚ùå AAB build failed"
    #       exit 1
    #     fi

    - name: Setup bundletool and extract APKs (signed)
      run: |
        echo "Setting up bundletool..."
        
        # Download bundletool
        wget https://github.com/google/bundletool/releases/download/1.18.1/bundletool-all-1.18.1.jar -O bundletool.jar

        if [ ! -f "bundletool.jar" ]; then
          echo "‚ùå Failed to download bundletool"
          exit 1
        else
          echo "‚úÖ bundletool downloaded successfully"
        fi
        
        # Read keystore credentials
        KEYSTORE_FILE="android/app/$(grep '^storeFile=' android/app/dotagiftx.keystore.properties | cut -d'=' -f2)"
        KEY_ALIAS=$(grep '^keyAlias=' android/app/dotagiftx.keystore.properties | cut -d'=' -f2)
        STORE_PASSWORD=$(grep '^storePassword=' android/app/dotagiftx.keystore.properties | cut -d'=' -f2)
        KEY_PASSWORD=$(grep '^keyPassword=' android/app/dotagiftx.keystore.properties | cut -d'=' -f2)

        # Ensure path is correct
        echo "Using keystore: $KEYSTORE_FILE"

        # Create output directory
        mkdir -p build/app/outputs/flutter-apk
        mkdir -p device-specs

        # Define specs for each architecture
        declare -A ABIS=(
          ["arm64-v8a"]="arm64-v8a"
          ["armeabi-v7a"]="armeabi-v7a"
          ["x86_64"]="x86_64"
        )

        for ABI in "${!ABIS[@]}"; do
          echo "Creating device spec for $ABI..."
          cat > device-specs/$ABI.json <<EOF
        {
          "supportedAbis": ["${ABIS[$ABI]}"],
          "supportedLocales": ["en"],
          "screenDensity": 420,
          "sdkVersion": 21
        }
        EOF

          echo "Building APK set for $ABI..."
          java -jar bundletool.jar build-apks \
            --bundle=app-release.aab \
            --output=build/app/outputs/flutter-apk/app-$ABI.apks \
            --device-spec=device-specs/$ABI.json \
            --ks=$KEYSTORE_FILE \
            --ks-pass=pass:$STORE_PASSWORD \
            --ks-key-alias=$KEY_ALIAS \
            --key-pass=pass:$KEY_PASSWORD \
            --overwrite
        done

        echo "Extracting APKs..."
        cd build/app/outputs/flutter-apk

        for ABI in "${!ABIS[@]}"; do
          unzip -q app-$ABI.apks
          APK_NAME="app-$ABI-release.apk"
          FOUND_APK=$(find . -name "*.apk" | grep "$ABI" | head -1)

          if [ -f "$FOUND_APK" ]; then
            cp "$FOUND_APK" "$APK_NAME"
            echo "‚úÖ Extracted $APK_NAME"
          else
            echo "‚ùå Could not find APK for $ABI"
            exit 1
          fi

          rm -rf splits_config.* *.apk base-* standalone-* 2>/dev/null || true
          rm -f app-$ABI.apks
        done

        cd ../../../..
        echo "‚úÖ All APKs extracted and signed:"
        find build/app/outputs/flutter-apk -name "*.apk"
    
    - name: Upload AAB to Google Play Internal Track
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.PLAYSTORE_SERVICE_ACCOUNT }}
        packageName: com.dotagiftx
        releaseFiles: build/app/outputs/bundle/release/app-release.aab
        track: internal
        status: draft
        whatsNewDirectory: release-notes

    - name: Get version from pubspec.yaml
      id: version
      run: |
        # Extract version from pubspec.yaml (format: version: 0.1.0+1)
        VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2)
        
        # Verify version was extracted
        if [ -z "$VERSION" ]; then
          echo "‚ùå Failed to extract version from pubspec.yaml"
          exit 1
        fi
        
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Version: v$VERSION"
        echo "‚úÖ Version extracted from pubspec.yaml: $VERSION"

    - name: Create Git tag via REST API
      env:
        PAT: ${{ secrets.DOTAGIFTX_REPO_TOKEN }}
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        SHA=$(git rev-parse HEAD)
        echo "Creating annotated tag object..."

        TAG_PAYLOAD=$(jq -n \
          --arg tag "$VERSION" \
          --arg message "Release $VERSION" \
          --arg object "$SHA" \
          --arg type "commit" \
          '{tag: $tag, message: $message, object: $object, type: $type}'
        )

        echo "Payload:"
        echo "$TAG_PAYLOAD"

        curl -s -X POST "https://api.github.com/repos/${{ github.repository }}/git/tags" \
          -H "Authorization: token $PAT" \
          -H "Content-Type: application/json" \
          -d "$TAG_PAYLOAD" > tag_response.json

        TAG_SHA=$(jq -r '.sha' tag_response.json)
        if [ "$TAG_SHA" = "null" ]; then
          echo "‚ùå Failed to create tag object"
          cat tag_response.json
          exit 1
        fi

        echo "Creating tag reference..."
        REF_PAYLOAD=$(jq -n --arg ref "refs/tags/$VERSION" --arg sha "$TAG_SHA" '{ref: $ref, sha: $sha}')

        curl -s -X POST "https://api.github.com/repos/${{ github.repository }}/git/refs" \
          -H "Authorization: token $PAT" \
          -H "Content-Type: application/json" \
          -d "$REF_PAYLOAD" > ref_response.json

        if grep -q '"ref":' ref_response.json; then
          echo "‚úÖ Tag $VERSION created"
        else
          echo "‚ùå Failed to create tag ref"
          cat ref_response.json
          exit 1
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DOTAGIFTX_REPO_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Release ${{ steps.version.outputs.version }}
          
          **Version:** `${{ steps.version.outputs.version }}` (from pubspec.yaml)
          **Build Date:** ${{ github.event.workflow_run.updated_at }}
          **Branch:** ${{ github.event.workflow_run.head_branch }}
          **Commit:** ${{ github.event.workflow_run.head_sha }}
          
          ### Quality Assurance
          ‚úÖ **Code Quality Check:** [Passed](${{ github.event.workflow_run.html_url }})
          - All tests passed with >80% coverage
          - Code analysis completed successfully
          - Ready for production deployment
          
          ### Downloads
          **Note:** APKs are extracted from Android App Bundle (AAB) for optimal performance and size.
          
          - **app-arm64-v8a-release.apk** - For most modern Android devices (64-bit ARM)
          - **app-armeabi-v7a-release.apk** - For older Android devices (32-bit ARM)
          - **app-x86_64-release.apk** - For Android emulators and x86 devices
          
          Choose the APK that matches your device architecture. Most users should download **app-arm64-v8a-release.apk**.
          
          ### How to Update Version
          To release a new version:
          1. Update the `version` field in `pubspec.yaml`
          2. Create pull request to `master` branch
          3. Once merged, release will be automatically created
        draft: false
        prerelease: false

    - name: Upload ARM64 APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DOTAGIFTX_REPO_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
        asset_name: app-arm64-v8a-release.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Upload ARMv7 APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DOTAGIFTX_REPO_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
        asset_name: app-armeabi-v7a-release.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Upload x86_64 APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DOTAGIFTX_REPO_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-x86_64-release.apk
        asset_name: app-x86_64-release.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Cleanup sensitive files
      if: always()
      run: |
        echo "Cleaning up sensitive files..."
        rm -f android/app/dotagiftx.keystore
        rm -f android/app/dotagiftx.keystore.properties
        rm -f android/app/google-services.json
        rm -f .env/prod.json
        echo "‚úÖ All sensitive files cleaned up" 