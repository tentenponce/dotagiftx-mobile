name: Release

on:
  push:
    branches:
      - feature/deploy

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha }}

    - name: Verify PAT can push to repository using REST API
      env:
        PAT: ${{ secrets.DOTAGIFTX_REPO_TOKEN }}
      run: |
        echo "🔍 Verifying PAT with GitHub REST API..."

        REPO="${{ github.repository }}"
        VERSION_TAG="test-pat-push-check"
        COMMIT_SHA=$(git rev-parse HEAD)

        # Check if tag already exists
        TAG_EXISTS=$(curl -s -H "Authorization: token $PAT" \
          https://api.github.com/repos/$REPO/git/refs/tags/$VERSION_TAG | jq -r '.ref // empty')

        if [ "$TAG_EXISTS" ]; then
          echo "ℹ️ Tag $VERSION_TAG already exists. Skipping creation."
        else
          echo "📝 Creating test annotated tag object..."
          TAG_RESPONSE=$(curl -s -X POST https://api.github.com/repos/$REPO/git/tags \
            -H "Authorization: token $PAT" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg tag "$VERSION_TAG" \
              --arg message "Test push via PAT" \
              --arg object "$COMMIT_SHA" \
              --arg type "commit" \
              --arg name "GitHub Actions" \
              --arg email "actions@github.com" \
              --arg date "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              '{tag: $tag, message: $message, object: $object, type: $type, tagger: {name: $name, email: $email, date: $date}}'")

          TAG_SHA=$(echo "$TAG_RESPONSE" | jq -r '.sha // empty')

          if [ -z "$TAG_SHA" ]; then
            echo "❌ Failed to create tag object via REST API"
            echo "$TAG_RESPONSE"
            exit 1
          fi

          echo "🔗 Creating ref for tag..."
          REF_RESPONSE=$(curl -s -X POST https://api.github.com/repos/$REPO/git/refs \
            -H "Authorization: token $PAT" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg ref "refs/tags/$VERSION_TAG" --arg sha "$TAG_SHA" '{ref: $ref, sha: $sha}')")

          if echo "$REF_RESPONSE" | jq -e '.ref' >/dev/null; then
            echo "✅ Tag $VERSION_TAG created successfully via REST API"
          else
            echo "❌ Failed to create tag ref"
            echo "$REF_RESPONSE"
            exit 1
          fi
        fi

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'

    - name: Cache Flutter dependencies
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          ${{ github.workspace }}/.dart_tool
        key: flutter-deps-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          flutter-deps-${{ runner.os }}-

    - name: Cache status
      run: |
        if [ "${{ steps.cache.outputs.cache-hit }}" = "true" ]; then
          echo "✅ Using cached Flutter dependencies (faster build)"
        else
          echo "🔄 Installing Flutter dependencies (first time or cache miss)"
        fi

    - name: Get dependencies
      run: flutter pub get

    - name: Generate internationalization code
      run: |
        echo "🌍 Generating internationalization code..."
        flutter pub run intl_utils:generate
        echo "✅ Internationalization code generated"

    - name: Code generation
      run: |
        echo "🔧 Running code generation..."
        dart run build_runner build --delete-conflicting-outputs
        echo "✅ Code generation completed"

    - name: Setup production environment and keystore
      env:
        PROD_ENV: ${{ secrets.PROD }}
      run: |
        echo "Setting up production environment and keystore files..."
        
        # Create required directories if they don't exist
        mkdir -p android/app
        mkdir -p .env
        
        # Save PROD environment as JSON file for dart-define-from-file
        echo "$PROD_ENV" > .env/prod.json
        echo "✅ Production environment JSON created"
        
        # Extract and decode keystore
        echo "$PROD_ENV" | jq -r '.keystore' | base64 -d > android/app/dotagiftx.keystore
        
        # Extract and decode keystore properties
        echo "$PROD_ENV" | jq -r '.keystoreProperties' | base64 -d > android/app/dotagiftx.keystore.properties
        
        # Extract and decode google-services.json
        echo "$PROD_ENV" | jq -r '.googleServicesJson' | base64 -d > android/app/google-services.json
        
        # Verify files were created
        if [ -f "android/app/dotagiftx.keystore" ]; then
          echo "✅ Keystore file created successfully"
          ls -la android/app/dotagiftx.keystore
        else
          echo "❌ Failed to create keystore file"
          exit 1
        fi
        
        if [ -f "android/app/dotagiftx.keystore.properties" ]; then
          echo "✅ Keystore properties created successfully"
          echo "Properties file contents (without sensitive data):"
          grep -E '^(storeFile|keyAlias)=' android/app/dotagiftx.keystore.properties || echo "Basic structure verified"
        else
          echo "❌ Failed to create keystore properties file"
          exit 1
        fi
        
        if [ -f "android/app/google-services.json" ]; then
          echo "✅ Google Services JSON file created successfully"
          echo "File size: $(stat -c%s android/app/google-services.json) bytes"
        else
          echo "❌ Failed to create Google Services JSON file"
          exit 1
        fi
        
        if [ -f ".env/prod.json" ]; then
          echo "✅ Production JSON file created successfully"
        else
          echo "❌ Failed to create production JSON file"
          exit 1
        fi

    - name: Build release APK
      run: |
        echo "Building release APK with production environment..."
        flutter build apk --release --split-per-abi --dart-define-from-file=.env/prod.json
        
        # List generated APK files
        echo "Generated APK files:"
        find build/app/outputs/flutter-apk -name "*.apk" -type f

    - name: Get version from pubspec.yaml
      id: version
      run: |
        # Extract version from pubspec.yaml (format: version: 0.1.0+1)
        VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2)
        
        # Verify version was extracted
        if [ -z "$VERSION" ]; then
          echo "❌ Failed to extract version from pubspec.yaml"
          exit 1
        fi
        
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Version: v$VERSION"
        echo "✅ Version extracted from pubspec.yaml: $VERSION"

    - name: Create Git tag via REST API
      env:
        PAT: ${{ secrets.DOTAGIFTX_REPO_TOKEN }}
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        SHA=$(git rev-parse HEAD)
        echo "Creating annotated tag object..."

        curl -s -X POST https://api.github.com/repos/${{ github.repository }}/git/tags \
          -H "Authorization: token $PAT" \
          -H "Content-Type: application/json" \
          -d "{\n            \"tag\": \"$VERSION\",\n            \"message\": \"Release $VERSION\",\n            \"object\": \"$SHA\",\n            \"type\": \"commit\"\n          }" > tag_response.json

        TAG_SHA=$(jq -r '.sha' tag_response.json)
        if [ "$TAG_SHA" = "null" ]; then
          echo "❌ Failed to create tag object"
          cat tag_response.json
          exit 1
        fi

        echo "Creating tag reference..."
        curl -s -X POST https://api.github.com/repos/${{ github.repository }}/git/refs \
          -H "Authorization: token $PAT" \
          -H "Content-Type: application/json" \
          -d "{\n            \"ref\": \"refs/tags/$VERSION\",\n            \"sha\": \"$TAG_SHA\"\n          }" > ref_response.json

        if grep -q '"ref":' ref_response.json; then
          echo "✅ Tag $VERSION created"
        else
          echo "❌ Failed to create tag ref"
          cat ref_response.json
          exit 1
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DOTAGIFTX_REPO_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Release ${{ steps.version.outputs.version }}
          
          **Version:** `${{ steps.version.outputs.version }}` (from pubspec.yaml)
          **Build Date:** ${{ github.event.workflow_run.updated_at }}
          **Branch:** ${{ github.event.workflow_run.head_branch }}
          **Commit:** ${{ github.event.workflow_run.head_sha }}
          
          ### Quality Assurance
          ✅ **Code Quality Check:** [Passed](${{ github.event.workflow_run.html_url }})
          - All tests passed with >80% coverage
          - Code analysis completed successfully
          - Ready for production deployment
          
          ### Downloads
          - **app-arm64-v8a-release.apk** - For most modern Android devices (64-bit ARM)
          - **app-armeabi-v7a-release.apk** - For older Android devices (32-bit ARM)
          - **app-x86_64-release.apk** - For Android emulators and x86 devices
          
          Choose the APK that matches your device architecture. Most users should download **app-arm64-v8a-release.apk**.
          
          ### How to Update Version
          To release a new version:
          1. Update the `version` field in `pubspec.yaml`
          2. Push to `feature/deploy` branch
          3. Wait for Code Quality workflow to pass
          4. Release will be automatically created
        draft: false
        prerelease: false

    - name: Upload ARM64 APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DOTAGIFTX_REPO_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
        asset_name: app-arm64-v8a-release.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Upload ARMv7 APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DOTAGIFTX_REPO_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
        asset_name: app-armeabi-v7a-release.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Upload x86_64 APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.DOTAGIFTX_REPO_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-x86_64-release.apk
        asset_name: app-x86_64-release.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Cleanup sensitive files
      if: always()
      run: |
        echo "Cleaning up sensitive files..."
        rm -f android/app/dotagiftx.keystore
        rm -f android/app/dotagiftx.keystore.properties
        rm -f android/app/google-services.json
        rm -f .env/prod.json
        echo "✅ All sensitive files cleaned up" 