name: Code Quality

on:
  push:

jobs:
  setup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter Environment
      uses: ./.github/actions/setup-flutter

    - name: Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          build/
        key: flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}-${{ hashFiles('**/build.yaml') }}
        restore-keys: |
          flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}-
          flutter-${{ runner.os }}-

    - name: Upload generated code
      uses: actions/upload-artifact@v4
      with:
        name: generated-code
        path: |
          lib/presentation/shared/localization/generated/
          **/*.g.dart
          **/*.gen.dart
          **/*.config.dart
        retention-days: 1

  analyze:
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter (minimal)
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'

    - name: Restore Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          build/
        key: flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}-${{ hashFiles('**/build.yaml') }}
        restore-keys: |
          flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}-
          flutter-${{ runner.os }}-

    - name: Download generated code
      uses: actions/download-artifact@v4
      with:
        name: generated-code

    - name: Get dependencies (from cache)
      run: flutter pub get

    - name: Code format validation
      run: flutter analyze .

  test:
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter (minimal)
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'

    - name: Restore Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          build/
        key: flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}-${{ hashFiles('**/build.yaml') }}
        restore-keys: |
          flutter-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}-
          flutter-${{ runner.os }}-

    - name: Download generated code
      uses: actions/download-artifact@v4
      with:
        name: generated-code

    - name: Get dependencies (from cache)
      run: flutter pub get

    - name: Run tests with coverage
      run: |
        dart run tools/generate_include_for_coverage_test.dart
        flutter test --coverage

    - name: Install lcov 2.2
      run: |
        sudo apt-get remove --purge -y lcov || true
        sudo apt-get update
        sudo apt-get install -y curl make gcc perl libcapture-tiny-perl libdatetime-perl

        echo "Downloading lcov 2.2..."
        curl -LO https://github.com/linux-test-project/lcov/releases/download/v2.2/lcov-2.2.tar.gz
        tar -xzf lcov-2.2.tar.gz
        cd lcov-2.2

        echo "Installing lcov 2.2..."
        sudo make install

        echo "Installed lcov version:"
        lcov --version

    - name: Process coverage data
      run: |
        echo "Files in original coverage:"
        lcov --list coverage/lcov.info | head -20
        
        echo "Extracting coverage for target directories..."
        lcov --extract coverage/lcov.info 'lib/presentation/**/viewmodels/*' 'lib/domain/usecases/*' -o coverage/lcov.info
        
        echo "Files in filtered coverage:"
        lcov --list coverage/lcov.info
        
        echo "Coverage summary:"
        lcov --summary coverage/lcov.info
        
        genhtml coverage/lcov.info -o coverage/html

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report
        path: coverage/html

    - name: Check coverage threshold
      run: |
        # Use the same coverage calculation as makefile (lcov standard)
        COVERAGE=$(lcov --summary coverage/lcov.info | grep -E "lines\.*:" | sed 's/.*lines.*: \([0-9.]*\)%.*/\1/')
        echo "Coverage: ${COVERAGE}%"
        
        # Check threshold using the same logic as makefile
        RESULT=$(echo "$COVERAGE" | awk '{if ($1 < 80) print "FAIL"; else print "PASS"}')
        if [ "$RESULT" = "FAIL" ]; then
          echo "❌ Coverage ${COVERAGE}% is below minimum threshold of 80%"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets minimum threshold of 80%"
        fi

    - name: Coverage summary
      run: |
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "Coverage report has been generated and uploaded as an artifact." >> $GITHUB_STEP_SUMMARY
        lcov --summary coverage/lcov.info >> $GITHUB_STEP_SUMMARY 