name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:

jobs:
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Generate internationalization code
      run: flutter pub run intl_utils:generate

    - name: Code generation
      run: dart run build_runner build --delete-conflicting-outputs

    - name: Code format validation
      run: flutter analyze .

    - name: Run tests with coverage
      run: flutter test --coverage

    - name: Install lcov
      run: sudo apt-get update && sudo apt-get install -y lcov

    - name: Process coverage data
      run: |
        # Create baseline coverage to include all files (even untested ones)
        lcov --capture --initial --directory lib/presentation --directory lib/domain --output-file coverage/lcov.base
        # Combine baseline with test coverage
        lcov --add-tracefile coverage/lcov.base --add-tracefile coverage/lcov.info --output-file coverage/lcov.combined
        # Extract only the target directories
        lcov --extract coverage/lcov.combined 'lib/presentation/**/viewmodels/*' 'lib/domain/usecases/*' -o coverage/lcov.info
        genhtml coverage/lcov.info -o coverage/html

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report
        path: coverage/html

    - name: Check coverage threshold
      run: |
        COVERAGE=$(lcov --summary coverage/lcov.info | grep -E "lines\.*:" | sed 's/.*lines.*: \([0-9.]*\)%.*/\1/')
        echo "Coverage: ${COVERAGE}%"
        # Use awk to properly multiply and compare
        RESULT=$(echo "$COVERAGE" | awk '{if ($1 < 80) print "FAIL"; else print "PASS"}')
        if [ "$RESULT" = "FAIL" ]; then
          echo "❌ Coverage ${COVERAGE}% is below minimum threshold of 80%"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets minimum threshold of 80%"
        fi

    - name: Coverage summary
      run: |
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "Coverage report has been generated and uploaded as an artifact." >> $GITHUB_STEP_SUMMARY
        lcov --summary coverage/lcov.info >> $GITHUB_STEP_SUMMARY 