name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:

jobs:
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Generate internationalization code
      run: flutter pub run intl_utils:generate

    - name: Code generation
      run: dart run build_runner build --delete-conflicting-outputs

    - name: Code format validation
      run: flutter analyze .

    - name: Run tests with coverage
      run: flutter test --coverage

    - name: Install lcov
      run: sudo apt-get update && sudo apt-get install -y lcov

    - name: Process coverage data
      run: |
        # Extract coverage for target directories
        lcov --extract coverage/lcov.info 'lib/presentation/**/viewmodels/*' 'lib/domain/usecases/*' -o coverage/lcov.info
        genhtml coverage/lcov.info -o coverage/html

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report
        path: coverage/html

    - name: Check coverage threshold
      run: |
        # Count all files in target directories
        TOTAL_FILES=$(find lib/presentation -name "*.dart" -path "*/viewmodels/*" | wc -l)
        TOTAL_FILES=$((TOTAL_FILES + $(find lib/domain/usecases -name "*.dart" | wc -l)))
        
        # Count files with coverage
        COVERED_FILES=$(grep -c "^SF:" coverage/lcov.info || echo "0")
        
        # Get coverage percentage from lcov
        COVERAGE=$(lcov --summary coverage/lcov.info | grep -E "lines\.*:" | sed 's/.*lines.*: \([0-9.]*\)%.*/\1/')
        
        echo "Total files in target directories: $TOTAL_FILES"
        echo "Files with coverage: $COVERED_FILES"
        echo "Coverage for tested files: ${COVERAGE}%"
        
        # Calculate actual coverage including untested files
        if [ "$TOTAL_FILES" -gt 0 ]; then
          if [ "$COVERED_FILES" -eq 0 ]; then
            ACTUAL_COVERAGE=0
          else
            # Weighted coverage: (covered_files / total_files) * coverage_percentage
            ACTUAL_COVERAGE=$(echo "$COVERED_FILES $TOTAL_FILES $COVERAGE" | awk '{printf "%.1f", ($1/$2)*$3}')
          fi
        else
          ACTUAL_COVERAGE=100
        fi
        
        echo "Actual coverage (including untested files): ${ACTUAL_COVERAGE}%"
        
        # Check threshold
        RESULT=$(echo "$ACTUAL_COVERAGE" | awk '{if ($1 < 80) print "FAIL"; else print "PASS"}')
        if [ "$RESULT" = "FAIL" ]; then
          echo "❌ Coverage ${ACTUAL_COVERAGE}% is below minimum threshold of 80%"
          exit 1
        else
          echo "✅ Coverage ${ACTUAL_COVERAGE}% meets minimum threshold of 80%"
        fi

    - name: Coverage summary
      run: |
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "Coverage report has been generated and uploaded as an artifact." >> $GITHUB_STEP_SUMMARY
        lcov --summary coverage/lcov.info >> $GITHUB_STEP_SUMMARY 